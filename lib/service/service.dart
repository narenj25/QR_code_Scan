// ignore_for_file: avoid_print

import 'dart:convert';
import 'dart:developer';
import 'package:flutter/material.dart';
import 'package:get_sim_number/service/coupon_data_model.dart';
import 'package:get_sim_number/view/qr_code_widget.dart';
import 'package:http/http.dart' as http;
import 'package:get_sim_number/service/model.dart';
import 'package:shared_preferences/shared_preferences.dart';

//192.168.0.116
String urlforvalidate =
    "http://192.168.1.5/sample_offer_app/public/index.php/api/createdata";

class QRservice {
  Future<void> qrFunction(
      {required String? mobileNumber,
      required String? urlforapi,
      required context}) async {
    if (urlforapi!.trim() == urlforvalidate) {
      try {
        if (mobileNumber == null || mobileNumber.length != 10) {
          showAlert(
              context: context,
              title: "Error",
              content: "Please scan with a mobile");
        }

        String url = urlforapi.trim();
        //   String url =
        // "http://192.168.0.116/sample_offer_app/public/index.php/api/createdata";
        http.Response response = await http.post(
          Uri.parse(url),
          body: jsonEncode(
            {"phone_number": mobileNumber},
          ),
        );

        log(response.statusCode.toString());
        log(response.body.toString());
        log("comming inside the function");

        if (response.statusCode == 200) {
          var responcedecode = jsonDecode(response.body);
          if (responcedecode['status'] == "1") {
            log(responcedecode['status'].toString());
            Autogenerated autogenerated =
                Autogenerated.fromJson(responcedecode);
            print("Status: ${autogenerated.status}");
            print("Response Message: ${autogenerated.response!.message}");
            print("User ID: ${autogenerated.response!.data!.userid}");
            print("Mobile: ${autogenerated.response!.data!.mobile}");
            print("Offer Data: ${autogenerated.response!.data!.offerdata}");
            SharedPreferences prefs = await SharedPreferences.getInstance();
            Map<String, String> storeData = {
              "user_id": autogenerated.response!.data!.userid.toString(),
              "Mobile": autogenerated.response!.data!.mobile.toString(),
              "Offer_data": autogenerated.response!.data!.offerdata.toString(),
            };
            prefs.setString("qrValue", jsonEncode(storeData));
            showAlert(
                context: context, title: "Success", content: "Coupon claimed ");
          } else if (responcedecode['status'] == "0") {
            showAlert(
                context: context,
                title: "Error",
                content: responcedecode["response"]);
            log(responcedecode["response"].toString());
          }
        } else {}
      } catch (e) {
        print(e);
      }
    } else {
      showAlert(
          content: "Please scan a valid QR", context: context, title: "Error");
    }
  }

  Future<List<Responsecoupon>> getCoupons(
      {required String? mobileNumber, required context}) async {
    List<Responsecoupon> couponList = [];

    try {
      if (mobileNumber == null || mobileNumber.length < 10) {
        return couponList;
      }
      String url =
          "http://192.168.1.5/sample_offer_app/public/index.php/api/getcoupondata";
      http.Response response = await http.post(
        Uri.parse(url),
        body: jsonEncode(
          {"phone_number": mobileNumber},
        ),
      );
      log(response.statusCode.toString());
      log(response.body.toString());
      if (response.statusCode == 200) {
        var responcedecode = jsonDecode(response.body);
        if (responcedecode['status'] == "1") {
          log(responcedecode['status'].toString());
          Couponinuse couponInUse =
              Couponinuse.fromJson(jsonDecode(response.body));
          // Accessing values
          print("Status11: ${couponInUse.status}");
          print("Status: ${couponInUse.response}");
          if (couponInUse.response != null) {
            for (var response in couponInUse.response!) {
              print("Response ID: ${response.id}");
              print("User ID: ${response.userid}");
              print("Mobile: ${response.mobile}");
              print("Offer Data: ${response.offerdata}");
              print("Claim Status: ${response.claimstatus}");
              Responsecoupon responseCoupon = Responsecoupon(
                claimstatus: response.claimstatus,
                id: response.id,
                mobile: response.mobile,
                offerdata: response.offerdata,
                userid: response.userid,
              );
              couponList.add(responseCoupon);
            }
            log(couponList.toString());
            return couponList;
          }
        } else if (responcedecode['status'] == "0") {
          // showAlert(context: context, title: "Error", content: "");
          // return couponList;
          return couponList;
        }
      } else {
        return couponList;
      }
    } catch (e) {
      print(e);
    }
    return couponList;
  }
}

showAlert({
  required BuildContext context,
  required String title,
  required String content,
}) {
  showDialog(
    context: context,
    builder: (context) {
      return AlertDialog(
        title: Text(title),
        content: Text(content),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text('Close'),
          ),
        ],
      );
    },
  );
}

showQRPopup({
  required BuildContext context,
  required String data,
  required String offer,
}) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        content: FittedBox(
          // You can replace the AssetImage with your image path or network image
          child: Column(
            children: [
              Text(
                offer,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 30,
                ),
              ),
              buildQrCode(context: context, data: data),
            ],
          ),
        ),
        actions: [
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop(); // Close the dialog
            },
            child: Text('Close'),
          ),
        ],
      );
    },
  );
}
